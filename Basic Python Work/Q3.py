# CMT309 Coursework 1
# Lewis Francis C1826277
# ************************************************************************************
import re
def function_renamer(code):
    '''
    Parameters
    ----------
    code : String
    Lines of python code to be re named depending on if criteria is met.
    

    Returns
    -------
    The tuple (d, newcode) which contains a nested dictionary with the function names hash code, camelcase version of the funciton name and an all caps version of the funciton name.

    Limitations
    -----------
    Does not save any "_" at the end of the function name
    
    '''
    
    # List of all the completed camel case words
    camelCase = []
    # Using re.findall to search for any words which come after def and before ( as these are the most likely to be function names
    inputCode = re.findall("def(.*?)\(",code)

    for i in inputCode:
    # Splitting any of the found words from the underscores
        txt_split = i.split("_")
    # Nested for loop to capitalise the first letter of all the words which are ahead of an underscore
        for d in range(len(txt_split)):
            txt_split[d] = txt_split[d].title()
    # Searching if the word starts with an underscore, we then add the amount of underscores back by using the amount of empty strings generated by .split()
        if "_" in i[1]:
            if " " in txt_split:
                str1 = ''.join(txt_split)
                underScoreAmount = txt_split.count("")
                underScoreAmount2 = txt_split.count(" ")
                underScoreAmountAdded = underScoreAmount+underScoreAmount2
                txt_strip = "_"*underScoreAmountAdded + str1.strip()
                camelCase.append(txt_strip)
    # Checking if any part of the word contains an underscore and since it comes after the previous search we can assume it does not start with an underscore
        elif "_" in i:
            if "" in txt_split:
                str1 = ''.join(txt_split)
                txt_strip = str1.strip()
                camelCase.append(txt_strip.title())
            elif "" not in txt_split:
                strTest = "".join(txt_split)
                camelCase.append(strTest)
            
        else:
            firstLetterOfString = "".join(i[1])
            combineFirstLetterWithWord = "".join(i[2:])
            camelCase.append(firstLetterOfString.title().strip()+ combineFirstLetterWithWord.strip())

    newcode = code
    d = {}
    sumnum = 0
    camelCasenum = len(camelCase)
    # Adding all of the relevant information into the dictionary and replacing the old function names with new ones with .replace
    for x in range(camelCasenum):
        d.update({inputCode[sumnum]:
                  {'hash':hash(i[sumnum]),
                   'camelcase':camelCase[sumnum],
                   'allcaps': camelCase[sumnum].upper()}})
        newcode = newcode.replace(inputCode[sumnum]," "+camelCase[sumnum])
        sumnum = sumnum+1
        
        
    return (d, newcode)
        
   
        

        

   
            
        

